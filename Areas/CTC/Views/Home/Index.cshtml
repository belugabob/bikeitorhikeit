@{
    ViewBag.Title = "Home Page";
}

<div id="ctcApp" ng-app="belugabrain.ctc">
    <div ng-controller="CtcTabsCtrl">
        <tabset>
            <tab heading="What's it all about?">
                <div class="row">
                    <div class="col-md-12">
                        <h2>
                            Welcome to the County Town Challenge (CTC)
                        </h2>
                        <p class="lead">What is the CTC?</p>
                        <p>
                            Well, to be honest, the CTC is a bit of a bonkers idea that I had one night.<br /><sub>(Surprisingly, I hadn't been consuming alcohol at the time)</sub>
                        </p>
                        <p>
                            Having previously completed the classic C2C route and a Devon North to South trip (well, almost) as well as several runnings of the now infamous <a href="http://z6.invisionfree.com/Sussex_Muddyarse/index.php?showtopic=3964" target="_blank">&quot;Cutty to Butty&quot;&trade;</a>,
                            I have, recently, been spending an unhealthy amount of time looking at maps, in order to plan my next (reasonably) long bike ride.
                        </p>
                        <p>For some reason, I noticed that three of the towns on the map in front of me were towns whose names can be followed by "Shire" to form the name of a county. Then I started to wonder just how many of these (English) counties I had visited - it turned out to be all but one of them</p>
                        <p>Things progressed from there and I started to wonder about the county towns themselves, and the count dwindled somewhat (22 of the 47 have eluded me so far - not that I've been trying, of course) so the idea of the CTC was born</p>
                        <p>In a nutshell, the aim of taking part in the CTC challenge is to vist every English county town, by bicycle</p>
                        <p>
                            <span class="lead">The rules</span><br />
                            <sub>(Not in a <a href="http://www.velominati.com/the-rules/" target="_blank">Velominati</a> way, I hasten to add)</sub>
                        </p>
                        <p>
                            <ul>
                                <li>This is not a race</li>
                                <li>It doesn't have to be done all in one go</li>
                                <li>You can take as long as you like , and do as many towns as you like in a single day</li>
                                <li>You can travel to your start point and from your end point by train, but try not to start or end at a county town (or you haven't really ridden there, have you?)</li>
                                <li>You don't have to log the ride (on Strava or Garmin Connect etc), but it might be a good source of reference for others</li>
                                <li>The are no official routes, so you can go by roads, cycle paths or bridleways, as is appropriate for your bike/mood/ability at the time</li>
                            </ul>
                        </p>
                    </div>
                </div>
            </tab>
            <tab heading="Tell me more">^^^</tab>
            <tab heading="Maps" select="initMap()">
                <div class="mapPane">
                    <div id="map-canvas"></div>
                    <div id="panel">
                        Network length - <span id="networkDistance"></span> km, as the crow flies
                    </div>
                </div>
            </tab>
        </tabset>
    </div>
</div>

@section styles{
<style>
    #map-canvas {
        height: 800px;
        margin: 0px;
        padding: 0px;
    }
    .angular-google-map-container { height: 400px; }

    .tab-content {
        border-left: 1px solid #ddd;
        border-right: 1px solid #ddd;
        border-bottom: 1px solid #ddd;
        padding: 10px;
    }
    .mapPane{
        padding: 10px;
    }
    .nav-tabs {
        margin-bottom: 0;
    }

    /*div.tab-content > .active {
        background-color: #eee;
    }*/
</style>
}

@section scripts{
    <script src="https://maps.googleapis.com/maps/api/js?v=3.exp&libraries=geometry"></script>
    @Scripts.Render("~/bundles/angular")
    <script>
        angular.module('belugabrain.ctc', ['ui.bootstrap']);
        angular.module('belugabrain.ctc').controller('CtcTabsCtrl', function ($scope, $window) {
            $scope.tabs = [
              { title: 'Dynamic Title 1', content: 'Dynamic content 1' },
              { title: 'Dynamic Title 2', content: 'Dynamic content 2', disabled: true }
            ];

            $scope.alertMe = function () {
                setTimeout(function () {
                    $window.alert('You\'ve selected the alert tab!');
                });
            };

            $scope.initMap = function () {
                if ($scope.map == null) {
                    initialize();
                }
            };

            function initialize() {

                var ocmMapType = new google.maps.ImageMapType({
                    getTileUrl: function (coord, zoom) {
                        return "http://tile.thunderforest.com/cycle/" + zoom + "/" + coord.x + "/" + coord.y + ".png";
                    },
                    tileSize: new google.maps.Size(256, 256),
                    name: "OpenCycleMap",
                    maxZoom: 18
                });

                var mapTypeIds = [];
                for (var type in google.maps.MapTypeId) {
                    mapTypeIds.push(google.maps.MapTypeId[type]);
                }

                mapTypeIds.push("OCM");

                $scope.map = new google.maps.Map(
                    document.getElementById('map-canvas'),
                    {
                        center: new google.maps.LatLng(52.8, -1.8),
                        zoom: 7,
                        mapTypeControlOptions: {
                            mapTypeIds: mapTypeIds,
                            position: google.maps.ControlPosition.TOP_RIGHT
                        }
                    }
                );

                var map = $scope.map;

                map.mapTypes.set("OCM", ocmMapType);

                setMarkers(map, towns);
                setTownLinks(map, towns, links);

                google.maps.event.trigger(map, 'resize');
            }

            /**
             * Data for the markers consisting of a name, a LatLng and a zIndex for
             * the order in which these markers should display on top of each
             * other.
             */
            var towns = [
                ["Chichester", 50.832086, -0.781243, 1],
                ["Newport", 50.700467, -1.290579, 1],
                ["Winchester", 51.067097, -1.319593, 1],
                ["Dorchester", 50.709254, -2.437557, 1],
                ["Exeter", 50.729389, -3.543011, 1],
                ["Truro", 50.263764, -5.064836, 1],
                ["Taunton", 51.023677, -3.103583, 1],
                ["Trowbridge", 51.319753, -2.214404, 1],
                ["Bristol", 51.449146, -2.581558, 1],
                ["Gloucester", 51.865356, -2.238828, 1],
                ["Reading", 51.457994, -0.971695, 1],
                ["Guildford", 51.236896, -0.580124, 1],
                ["Maidstone", 51.277623, 0.521304, 1],
                ["Lewes", 50.870620, 0.011106, 1],
                ["London", 51.505100, -0.086869, 1],
                ["Chelmsford", 51.736216, 0.468596, 1],
                ["Hertford", 51.799000, -0.091610, 1],
                ["Aylesbury", 51.814039, -0.815302, 1],
                ["Oxford", 51.753461, -1.269647, 1],
                ["Hereford", 52.061206, -2.708964, 1],
                ["Worcester", 52.194532, -2.209502, 1],
                ["Warwick", 52.286423, -1.582049, 1],
                ["Northampton", 52.237258, -0.906592, 1],
                ["Bedford", 52.136529, -0.479333, 1],
                ["Cambridge", 52.194320, 0.136942, 1],
                ["Ipswich", 52.050622, 1.145028, 1],
                ["Norwich", 52.627165, 1.306535, 1],
                ["Oakham", 52.671843, -0.734130, 1],
                ["Leicester", 52.630736, -1.125003, 1],
                ["Birmingham", 52.477390, -1.896747, 1],
                ["Shrewsbury", 52.711651, -2.749810, 1],
                ["Stafford", 52.803812, -2.121588, 1],
                ["Derby", 52.916147, -1.463578, 1],
                ["Nottingham", 52.947054, -1.147241, 1],
                ["Lincoln", 53.226626, -0.539618, 1],
                ["Sheffield", 53.378441, -1.463556, 1],
                ["Chester", 53.196432, -2.880418, 1],
                ["Liverpool", 53.406958, -2.978603, 1],
                ["Manchester", 53.476385, -2.230383, 1],
                ["Wakefield", 53.682698, -1.504520, 1],
                ["Beverley", 53.842356, -0.423400, 1],
                ["Northallerton", 54.332782, -1.440675, 1],
                ["Lancaster", 54.048647, -2.808401, 1],
                ["Carlisle", 54.890932, -2.932214, 1],
                ["Morpeth", 55.162101, -1.682823, 1],
                ["Newcastle", 54.969155, -1.617347, 1],
                ["Durham", 54.779039, -1.581513, 1]
            ];

            var links = [
                [1, [2, 3, 12, 14]],
                [2, [3, 4]],
                [3, [4, 8, 11, 12]],
                [4, [5, 7, 8]],
                [5, [6, 7]],
                [6, [7]],
                [7, [8, 9]],
                [8, [9, 10, 11, 19]],
                [9, [10, 20]],
                [10, [19, 20, 21, 22]],
                [11, [12, 15, 18, 19]],
                [12, [13, 14, 15]],
                [13, [14, 15, 16]],
                [15, [16, 17, 18]],
                [16, [17, 25, 26]],
                [17, [18, 24, 25]],
                [18, [19, 23, 24]],
                [19, [22, 23]],
                [20, [21, 31]],
                [21, [22, 30, 31]],
                [22, [23, 29, 30]],
                [23, [24, 28, 29]],
                [24, [25, 28]],
                [25, [26, 27, 28]],
                [26, [27]],
                [27, [28, 35]],
                [28, [29, 34, 35]],
                [29, [30, 33, 34]],
                [30, [31, 32, 33]],
                [31, [32, 37]],
                [32, [33, 37]],
                [33, [34, 36, 37]],
                [34, [35, 36]],
                [35, [36, 41]],
                [36, [37, 39, 40, 41]],
                [37, [38, 39]],
                [38, [39, 43]],
                [39, [40, 42, 43]],
                [40, [41, 42]],
                [41, [42]],
                [42, [43, 47]],
                [43, [44, 47]],
                [44, [45, 46, 47]],
                [45, [46]],
                [46, [47]]
            ];

            function setMarkers(map, locations) {
                // Add markers to the map

                for (var i = 0; i < locations.length; i++) {
                    var location = locations[i];
                    var myLatLng = new google.maps.LatLng(location[1], location[2]);
                    var marker = new google.maps.Marker({
                        position: myLatLng,
                        map: map,
                        title: location[0],
                        zIndex: location[3]
                    });
                }
            }

            function setTownLinks(map, locations, links) {
                var polyOptions = {
                    strokeColor: '#FF0000',
                    strokeOpacity: 0.5,
                    strokeWeight: 3,
                    geodesic: true
                };
                var networkLength = 0;
                var startPos;
                var endPos;

                for (var i = 0; i < links.length; i++) {
                    var link = links[i];
                    var linkStart = link[0] - 1;
                    for (var n = 0; n < link[1].length; n++) {
                        var linkEnd = link[1][n] - 1;
                        poly = new google.maps.Polyline(polyOptions);
                        poly.setMap(map);
                        startPos = new google.maps.LatLng(locations[linkStart][1], locations[linkStart][2]);
                        endPos = new google.maps.LatLng(locations[linkEnd][1], locations[linkEnd][2]);
                        var path = poly.getPath();
                        path.push(startPos);
                        path.push(endPos);
                        networkLength += google.maps.geometry.spherical.computeDistanceBetween(startPos, endPos);
                    }
                }
                document.getElementById('networkDistance').innerText = (networkLength / 1000) | 0;
            }

            //google.maps.event.addDomListener(window, 'load', initialize);
        });
    </script>
    <script>


    </script>
}
